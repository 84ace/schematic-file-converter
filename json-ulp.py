#!/usr/bin/env python
# json-ulp.py - generate json.ulp, Eagle CAD program to export circuits to JSON
# Alex Ray (2011) <ajray@ncsu.edu>

# TODO(ajray): use pluralization instead of rewriting ('libraries','library')
#             figure out what's up with clearance[number]
# TODO do comma's properly
import json
eagle = json.loads(open("eagle511.json").read())

header = """
// json.ulp - Export an Eagle Board, Schematic or Library into JSON
// Generated by the codez in this wonderful github repo:
// http://github.com/ajray/schematic-file-converter
// Alex Ray (2011) <ajray@ncsu.edu>
"""
misc = """
string cn = ",\n"; // comma and newline
string bn = "{\n"; // brace and newline
string esc(string s) { // JSON string escapes
    string out = "";
    for (int i = 0; s[i]; ++i) {
        switch(s[i]) {
            case '"': out += "\\\""; break;
            case '\\': out += "\\\\"; break;
            case '/': out += "\\/"; break;
            case '\b': out += "\\b"; break;
            case '\f': out += "\\f"; break;
            case '\n': out += "\\n"; break;
            case '\r': out += "\\r"; break;
            case '\t': out += "\\t"; break;
            default: out += s[i];
        }
    }
    return out;
}
string beg(string a) { // pair with the start of an object
    string s;
    sprintf(s,"\"%s\": ",esc(a));
    return s;
}
string pl(string a) { // pair with the start of a list
    string s;
    sprintf(s,"\"%s\": [\n",esc(a));
    return s;
}
string ps(string a, string b) { // pair with string
    string s;
    sprintf(s,"\"%s\":\"%s\"",esc(a),esc(b));
    return s;
}
string pi(string a, int b) { // pair with int
    string s;
    sprintf(s,"\"%s\":%d",esc(a),b);
    return s;
}
string pr(string a, real b) { // pair with real
    string s;
    sprintf(s,"\"%s\":%g",esc(a),b);
    return s;
}
"""

def makepick(l):
  """ Make a pick function from a list """
  name = l[0]
  s = "string pick%s(int i) { // pick %s_...\n\tswitch(i) {\n" % (name, name)
  for term in l[1:]:
    s += '\t\tcase %s_%s: return "%s_%s";\n' % (name,term,name,term)
  s += '\t\tdefault: return "%s_unknown";\n\t}\n}\n' % name
  return s
# Goes with makepick()
picks = [
  ["CAP","FLAT","ROUND"],
  ["GRID_UNIT","MIL","MM","MIL","INCH"],
  ["ATTRIBUTE_DISPLAY_FLAG","OFF","VALUE","NAME"]]

def makeprint(l):
  """ Make a print function from a list """
  name = l[0]
  s = "string print%s(UL_%s %s) { // print %s_...\n\tswitch(i) {\n" % (name, name)
  for term in l[1:]:
    s += '\t\tcase %s_%s: return "%s_%s";\n' % (name,term,name,term)
  s += '\t\tdefault: return "%s_unknown";\n\t}\n}\n' % name
  # TODO secondary function
  s += "string pprint%s"
  return s

if __name__ == "__main__":
  print header
  for pick in picks: print makepick(pick)
